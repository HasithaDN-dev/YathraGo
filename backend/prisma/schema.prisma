generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique
}

model OtpCode {
  id        Int        @id @default(autoincrement())
  phone     String
  code      String
  userType  UserType
  purpose   OtpPurpose @default(PHONE_VERIFICATION)
  expiresAt DateTime
  isUsed    Boolean    @default(false)
  attempts  Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([phone, userType, purpose])
}

model Webuser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  role      String   @default("owner")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicleOwner VehicleOwner?
}

model Admin {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Manager {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  department String?
  level      String   @default("JUNIOR")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vehicle {
  id                  Int           @id @default(autoincrement())
  type                String
  brand               String
  model               String
  manufactureYear     Int
  registrationNumber  String?
  color               String
  route               String[]
  no_of_seats         Int
  air_conditioned     Boolean       @default(false)
  assistant           Boolean       @default(false)
  rear_picture_url    String
  front_picture_url   String
  side_picture_url    String
  inside_picture_url  String
  revenue_license_url String?
  insurance_front_url String?
  insurance_back_url  String?
  vehicle_reg_url     String?
  ownerId             Int?
  driverId            Int?
  driver              Driver?       @relation(fields: [driverId], references: [driver_id])
  owner               VehicleOwner? @relation(fields: [ownerId], references: [id])
}

model Chat {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime @default(now())
  seen      Boolean  @default(false)
}

model BackupDriver {
  id             Int    @id @default(autoincrement())
  name           String
  phone          String
  vehicle_Reg_No String
  NIC            String
}

model Absence_Child {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model DriverNotification {
  id      Int      @id @default(autoincrement())
  title   String
  message String
  date    DateTime @default(now())
}

model MonthlyPayment {
  id          Int      @id @default(autoincrement())
  amount      Float
  paid        Boolean  @default(false)
  paymentDate DateTime @default(now())
  month       String
  Status      String   @default("Pending")
}

model PaymentBalance {
  id          Int      @id @default(autoincrement())
  month       String
  amountDue   Float
  balance     Float
  date        DateTime @default(now())
  description String
  type        String
}

model StaffEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model ChildEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model Driver {
  driver_id                Int                @id @default(autoincrement())
  NIC                      String
  address                  String
  date_of_birth            DateTime
  date_of_joining          DateTime           @default(now())
  driver_license_back_url  String
  driver_license_front_url String
  name                     String
  gender                   String
  nic_front_pic_url        String
  nice_back_pic_url        String
  phone                    String
  profile_picture_url      String
  second_phone             String
  vehicle_Reg_No           String
  email                    String?
  status                   String             @default("ACTIVE")
  registrationStatus       RegistrationStatus @default(OTP_PENDING)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  vehicles                 Vehicle[]
  driverCities             DriverCities[]
  childRideRequests        ChildRideRequest[]
  driverRoutes             DriverRoute[]
  routeWaypoints           RouteWaypoint[]
  childTrips     Child_Trip[]
}

model FoundedBackupDrivers {
  id Int @id @default(autoincrement())
}

model VehicleOwner {
  id         Int       @id
  first_name String?
  last_name  String?
  phone      String?
  email      String?
  company    String?
  Address    String?
  vehicles   Vehicle[]
  webuser    Webuser   @relation(fields: [id], references: [id])
}

model Customer {
  customer_id        Int                @id @default(autoincrement())
  firstName          String
  lastName           String
  gender             Gender             @default(Unspecified)
  phone              String             @unique
  email              String?
  address            String?
  profileImageUrl    String?
  emergencyContact   String?
  status             String             @default("ACTIVE")
  registrationStatus RegistrationStatus @default(OTP_PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  children           Child[]
  staffPassenger     Staff_Passenger?

  @@index([phone])
  @@index([registrationStatus])
  @@index([status])
}

model Complaints {
  complaint_id Int      @id @default(autoincrement())
  description  String
  type         String
  createdAt    DateTime @default(now())
}

model Inquires {
  inquiry_id  Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
}

model Absence_Staff {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model Ratings_and_Reviews {
  review_id Int      @id @default(autoincrement())
  review    String
  ratings   Int
  createdAt DateTime @default(now())
}

model Child {
  child_id        Int       @id @default(autoincrement())
  relationship    String
  nearbyCity      String
  schoolLocation  String
  school          String
  childFirstName  String
  childLastName   String
  gender          Gender    @default(Unspecified)
  childImageUrl   String?
  pickUpAddress   String
  // Location coordinates
  schoolLatitude  Float?
  schoolLongitude Float?
  pickupLatitude  Float?
  pickupLongitude Float?
  customerId      Int?
  Customer        Customer? @relation(fields: [customerId], references: [customer_id])

  // relations for ride requests and route waypoints
  rideRequests   ChildRideRequest[]
  routeWaypoints RouteWaypoint[]

  @@index([customerId])
  @@index([school])
  @@index([nearbyCity])
}

model Child_Trip {
  childTrip_id Int      @id @default(autoincrement())
  date         DateTime @default(now())
  pickUp       String
  dropOff      String
  startTime    DateTime
  endTime      DateTime
  driverId     Int?     // Foreign key to Driver
  driver       Driver? @relation(fields: [driverId], references: [driver_id])

  @@index([driverId]) // Index for faster queries
}

model Staff_Passenger {
  id              Int      @id @default(autoincrement())
  customerId      Int      @unique
  nearbyCity      String
  workLocation    String
  workAddress     String
  workLatitude    Float?
  workLongitude   Float?
  pickUpLocation  String
  pickupAddress   String
  pickupLatitude  Float?
  pickupLongitude Float?
  Customer        Customer @relation(fields: [customerId], references: [customer_id])

  @@index([customerId])
  @@index([workLocation])
  @@index([nearbyCity])
}

model Staff_Trip {
  staffTrip_id    Int      @id @default(autoincrement())
  pickUpLocation  String
  dropOffLocation String
  startTime       DateTime
  endTime         DateTime
  date            DateTime @default(now())
}

model Child_Assign_To {
  assign_id Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

enum RegistrationStatus {
  OTP_PENDING
  OTP_VERIFIED
  ACCOUNT_CREATED
  HAVING_A_PROFILE
}

enum OtpPurpose {
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN
}

enum UserType {
  CUSTOMER
  DRIVER
}

enum Gender {
  Male
  Female
  Unspecified
}

enum ChildAssignRequestStatus {
  Pending
  Assigned
  Rejected
}

// --- City Table ---
model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Driver's Available Cities (Many-to-Many) ---
model DriverCities {
  id       Int    @id @default(autoincrement())
  driver   Driver @relation(fields: [driverId], references: [driver_id])
  driverId Int
  // store an ordered list of city IDs representing the driver's route
  cityIds  Int[]

  @@unique([driverId])
}

// --- Child Ride Requests ---
model ChildRideRequest {
  id        Int                      @id @default(autoincrement())
  child     Child                    @relation(fields: [childId], references: [child_id])
  childId   Int
  driver    Driver                   @relation(fields: [driverId], references: [driver_id])
  driverId  Int
  status    ChildAssignRequestStatus @default(Pending)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

// --- Driver Route (Optimized Route) ---
model DriverRoute {
  id           Int      @id @default(autoincrement())
  driver       Driver   @relation(fields: [driverId], references: [driver_id])
  driverId     Int
  date         DateTime
  routeDetails Json // Store Google Directions API JSON
  createdAt    DateTime @default(now())

  waypoints RouteWaypoint[]
}

// --- Waypoints Table ---
model RouteWaypoint {
  id            Int         @id @default(autoincrement())
  driverRoute   DriverRoute @relation(fields: [driverRouteId], references: [id])
  driverRouteId Int
  child         Child       @relation(fields: [childId], references: [child_id])
  childId       Int
  driver        Driver      @relation(fields: [driverId], references: [driver_id])
  driverId      Int
  order         Int // Order of pickup
}
