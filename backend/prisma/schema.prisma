generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique
  // Removed relation to Customer
}

model OtpCode {
  id        Int        @id @default(autoincrement())
  phone     String
  code      String
  userType  UserType
  purpose   OtpPurpose @default(PHONE_VERIFICATION)
  expiresAt DateTime
  isUsed    Boolean    @default(false)
  attempts  Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([phone, userType, purpose])
}

model Webuser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Manager {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  department String?
  level      String   @default("JUNIOR")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vehicle {
  id                  Int       @id @default(autoincrement())
  type                String
  brand               String
  model               String
  manufactureYear     Int
  registrationNumber  String
  color               String
  route               String[]
  no_of_seats         Int
  air_conditioned     Boolean   @default(false)
  assistant           Boolean   @default(false)
  rear_picture_url    String
  front_picture_url   String
  side_picture_url    String
  inside_picture_url  String
  revenue_license_url String?
  insurance_front_url String?
  insurance_back_url  String?
  vehicle_reg_url     String?
  owner   VehicleOwner? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  driver   Driver? @relation(fields: [driverId], references: [driver_id])
  driverId Int?
}

model Chat {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime @default(now())
  seen      Boolean  @default(false)
}

model BackupDriver {
  id             Int    @id @default(autoincrement())
  name           String
  phone          String
  vehicle_Reg_No String
  NIC            String
}

model Absence_Child {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model DriverNotification {
  id      Int      @id @default(autoincrement())
  title   String
  message String
  date    DateTime @default(now())
}

model MonthlyPayment {
  id          Int      @id @default(autoincrement())
  amount      Float
  paid        Boolean  @default(false)
  paymentDate DateTime @default(now())
  month       String
  Status      String   @default("Pending")
}

model PaymentBalance {
  id          Int      @id @default(autoincrement())
  month       String
  amountDue   Float
  balance     Float
  date        DateTime @default(now())
  description String
  type        String
}

model StaffEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model ChildEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model Driver {
  driver_id                Int                @id @default(autoincrement())
  NIC                      String
  address                  String
  date_of_birth            DateTime
  date_of_joining          DateTime           @default(now())
  driver_license_back_url  String
  driver_license_front_url String
  name                     String
  gender                   String
  nic_front_pic_url        String
  nice_back_pic_url        String
  phone                    String // Standardized phone field name
  profile_picture_url      String
  second_phone             String
  vehicle_Reg_No           String
  email                    String? // Added email field for consistency
  status                   String             @default("ACTIVE")
  registrationStatus       RegistrationStatus @default(OTP_PENDING)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  vehicles Vehicle[] 
}

model FoundedBackupDrivers {
  id Int @id @default(autoincrement())
}

model VehicleOwner {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  phone      String
  email      String
  company    String?
  Address    String
  vehicles    Vehicle[]
}

model Customer {
  customer_id        Int                @id @default(autoincrement())
  name               String
  phone              String             @unique
  email              String?
  address            String?
  profileImageUrl    String?
  emergencyContact   String?
  status             String             @default("ACTIVE")
  registrationStatus RegistrationStatus @default(OTP_PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  children           Child[]
  staffPassenger     Staff_Passenger?
}

model Complaints {
  complaint_id Int      @id @default(autoincrement())
  description  String
  type         String
  createdAt    DateTime @default(now())
}

model Inquires {
  inquiry_id  Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
}

model Absence_Staff {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model Ratings_and_Reviews {
  review_id Int      @id @default(autoincrement())
  review    String
  ratings   Int
  createdAt DateTime @default(now())
}

model Child {
  child_id       Int       @id @default(autoincrement())
  relationship   String
  NearbyCity     String
  schoolLocation String
  school         String
  childName      String
  childImageUrl  String?
  pickUpAddress  String
  Customer       Customer? @relation(fields: [customerId], references: [customer_id])
  customerId     Int?
}

model Child_Trip {
  childTrip_id Int      @id @default(autoincrement())
  date         DateTime @default(now())
  pickUp       String
  dropOff      String
  startTime    DateTime
  endTime      DateTime
}

model Staff_Passenger {
  id             Int      @id @default(autoincrement())
  customerId     Int      @unique
  nearbyCity     String
  workLocation   String
  workAddress    String
  pickUpLocation String
  pickupAddress  String
  Customer       Customer @relation(fields: [customerId], references: [customer_id])
}

model Staff_Trip {
  staffTrip_id    Int      @id @default(autoincrement())
  pickUpLocation  String
  dropOffLocation String
  startTime       DateTime
  endTime         DateTime
  date            DateTime @default(now())
}

model Child_Assign_To {
  assign_id Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

enum RegistrationStatus {
  OTP_PENDING
  OTP_VERIFIED
  CHILD_REGISTERED
  STAFF_REGISTERED
  FULLY_REGISTERED
}

enum OtpPurpose {
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN
}

enum UserType {
  CUSTOMER
  DRIVER
}
