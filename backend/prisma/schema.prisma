generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique
}

model OtpCode {
  id        Int        @id @default(autoincrement())
  phone     String
  code      String
  userType  UserType
  purpose   OtpPurpose @default(PHONE_VERIFICATION)
  expiresAt DateTime
  isUsed    Boolean    @default(false)
  attempts  Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([phone, userType, purpose])
}

model Webuser {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  username     String
  role         Role          @default(OWNER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  fcmToken     String?
  vehicleOwner VehicleOwner?

  @@index([fcmToken])
}

model Admin {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Manager {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  department String?
  level      String   @default("JUNIOR")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vehicle {
  id                  Int           @id @default(autoincrement())
  type                String
  brand               String
  model               String
  manufactureYear     Int
  registrationNumber  String?
  color               String
  route               String[]
  no_of_seats         Int
  air_conditioned     Boolean       @default(false)
  assistant           Boolean       @default(false)
  rear_picture_url    String
  front_picture_url   String
  side_picture_url    String
  inside_picture_url  String
  revenue_license_url String?
  insurance_front_url String?
  insurance_back_url  String?
  vehicle_reg_url     String?
  ownerId             Int?
  driverId            Int?
  driver              Driver?       @relation(fields: [driverId], references: [driver_id])
  owner               VehicleOwner? @relation(fields: [ownerId], references: [id])
}

model Chat {
  id             Int           @id @default(autoincrement())
  message        String?
  imageUrl       String?
  timestamp      DateTime      @default(now())
  seen           Boolean       @default(false)
  senderId       Int
  senderType     UserTypes
  conversationId Int
  status         MessageStatus @default(SENT)
  conversation   Conversation  @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
}

model Conversation {
  id               Int       @id @default(autoincrement())
  participantAId   Int
  participantAType UserTypes
  participantBId   Int
  participantBType UserTypes
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  messages         Chat[]

  @@unique([participantAId, participantAType, participantBId, participantBType])
}

model BackupDriver {
  id             Int     @id @default(autoincrement())
  name           String
  phone          String
  vehicle_Reg_No String
  NIC            String
  fcmToken       String?

  @@index([fcmToken])
}

model Absence_Child {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
  childId   Int
  date      DateTime @default(now()) @db.Date
  Child     Child    @relation(fields: [childId], references: [child_id])

  @@unique([childId, date])
  @@index([childId])
  @@index([date])
}

model Notification {
  id         Int               @id @default(autoincrement())
  sender     String
  message    String
  type       NotificationTypes
  receiver   UserTypes
  receiverId Int?
  createdAt  DateTime          @default(now())
  isExpanded Boolean           @default(false)

  @@index([type])
  @@index([receiver, receiverId])
}

model MonthlyPayment {
  id          Int      @id @default(autoincrement())
  amount      Float
  paid        Boolean  @default(false)
  paymentDate DateTime @default(now())
  month       String
  Status      String   @default("Pending")
}

model PaymentBalance {
  id          Int      @id @default(autoincrement())
  month       String
  amountDue   Float
  balance     Float
  date        DateTime @default(now())
  description String
  type        String
}

model StaffEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model ChildEmergency {
  id             Int      @id @default(autoincrement())
  type           String
  description    String
  OccurrenceDate DateTime
}

model Driver {
  driver_id                Int                @id @default(autoincrement())
  NIC                      String
  address                  String
  date_of_birth            DateTime
  date_of_joining          DateTime           @default(now())
  driver_license_back_url  String
  driver_license_front_url String
  name                     String
  gender                   String
  nic_front_pic_url        String
  nice_back_pic_url        String
  phone                    String
  profile_picture_url      String
  second_phone             String
  vehicle_Reg_No           String
  email                    String?
  status                   String             @default("ACTIVE")
  registrationStatus       RegistrationStatus @default(OTP_PENDING)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  fcmToken                 String?
  attendance               Attendance[]
  ChildPayment             ChildPayment[]
  childRideRequests        ChildRideRequest[]
  childTrips               Child_Trip[]
  driverCities             DriverCities?
  driverRoutes             DriverRoute[]
  routeWaypoints           RouteWaypoint[]
  StaffRideRequest         StaffRideRequest[]
  vehicles                 Vehicle[]

  @@index([fcmToken])
}

model FoundedBackupDrivers {
  id Int @id @default(autoincrement())
}

model VehicleOwner {
  id         Int       @id
  first_name String?
  last_name  String?
  phone      String?
  email      String?
  company    String?
  Address    String?
  vehicles   Vehicle[]
  webuser    Webuser   @relation(fields: [id], references: [id])
}

model Customer {
  customer_id        Int                @id @default(autoincrement())
  firstName          String
  lastName           String
  gender             Gender             @default(Unspecified)
  phone              String             @unique
  email              String?
  address            String?
  profileImageUrl    String?
  emergencyContact   String?
  status             String             @default("ACTIVE")
  registrationStatus RegistrationStatus @default(OTP_PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  fcmToken           String?
  children           Child[]
  ChildPayment       ChildPayment[]
  staffPassenger     Staff_Passenger?

  @@index([phone])
  @@index([registrationStatus])
  @@index([status])
  @@index([fcmToken])
}

model ComplaintsInquiries {
  id             Int                     @id @default(autoincrement())
  senderId       Int
  senderUserType UserTypes
  type           ComplaintInquiryTypes
  description    String
  category       ComplaintInquiryCategory
  status         ComplaintStatus         @default(PENDING)
  createdAt      DateTime                @default(now())

  @@index([senderId])
  @@index([type])
  @@index([category])
  @@index([senderUserType])
  @@index([status])
}

model Absence_Staff {
  absent_id Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model Ratings_and_Reviews {
  review_id Int      @id @default(autoincrement())
  review    String
  ratings   Int
  createdAt DateTime @default(now())
}

model Child {
  child_id        Int                @id @default(autoincrement())
  relationship    String
  nearbyCity      String
  schoolLocation  String
  school          String
  childFirstName  String
  childLastName   String
  gender          Gender             @default(Unspecified)
  childImageUrl   String?
  pickUpAddress   String
  schoolLatitude  Float?
  schoolLongitude Float?
  pickupLatitude  Float?
  pickupLongitude Float?
  customerId      Int?
  Absence_Child   Absence_Child[]
  attendance      Attendance[]
  Customer        Customer?          @relation(fields: [customerId], references: [customer_id])
  ChildPayment    ChildPayment[]
  rideRequests    ChildRideRequest[]
  routeWaypoints  RouteWaypoint[]
  routeStops      RouteStop[]

  @@index([customerId])
  @@index([school])
  @@index([nearbyCity])
}

model Child_Trip {
  childTrip_id Int      @id @default(autoincrement())
  date         DateTime @default(now())
  pickUp       String
  dropOff      String
  startTime    DateTime
  endTime      DateTime
  driverId     Int?
  driver       Driver?  @relation(fields: [driverId], references: [driver_id])

  @@index([driverId])
}

model Staff_Passenger {
  id               Int                @id @default(autoincrement())
  customerId       Int                @unique
  nearbyCity       String
  workLocation     String
  workAddress      String
  workLatitude     Float?
  workLongitude    Float?
  pickUpLocation   String
  pickupAddress    String
  pickupLatitude   Float?
  pickupLongitude  Float?
  StaffRideRequest StaffRideRequest[]
  Customer         Customer           @relation(fields: [customerId], references: [customer_id])

  @@index([customerId])
  @@index([workLocation])
  @@index([nearbyCity])
}

model Staff_Trip {
  staffTrip_id    Int      @id @default(autoincrement())
  pickUpLocation  String
  dropOffLocation String
  startTime       DateTime
  endTime         DateTime
  date            DateTime @default(now())
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DriverCities {
  id             Int       @id @default(autoincrement())
  driverId       Int       @unique
  cityIds        Int[]
  rideType       Ridetype  @default(Both)
  usualEndTime   DateTime? @db.Time(6)
  usualStartTime DateTime? @db.Time(6)
  driver         Driver    @relation(fields: [driverId], references: [driver_id])
}

model ChildRideRequest {
  id           Int           @id @default(autoincrement())
  childId      Int
  driverId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Amount       Float?
  AssignedDate DateTime?
  Estimation   Float?
  status       RequestStatus @default(Pending)
  child        Child         @relation(fields: [childId], references: [child_id])
  driver       Driver        @relation(fields: [driverId], references: [driver_id])
}

model DriverRoute {
  id                  Int             @id @default(autoincrement())
  driverId            Int
  date                DateTime        @db.Date
  routeType           String          @default("MORNING_PICKUP") // MORNING_PICKUP, AFTERNOON_DROPOFF
  status              String          @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  totalDistanceMeters Int?
  totalDurationSecs   Int?
  optimizedPolyline   String?
  routeDetails        Json?
  startedAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  driver              Driver          @relation(fields: [driverId], references: [driver_id])
  stops               RouteStop[]
  waypoints           RouteWaypoint[]

  @@unique([driverId, date, routeType])
  @@index([driverId, date])
  @@index([status])
}

model RouteStop {
  id                       Int          @id @default(autoincrement())
  driverRouteId            Int
  childId                  Int
  order                    Int
  type                     WaypointType
  address                  String
  latitude                 Float
  longitude                Float
  etaSecs                  Int?
  cumulativeDistanceMeters Int?
  legDistanceMeters        Int?
  status                   StopStatus   @default(PENDING)
  arrivedAt                DateTime?
  completedAt              DateTime?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  child                    Child        @relation(fields: [childId], references: [child_id])
  driverRoute              DriverRoute  @relation(fields: [driverRouteId], references: [id], onDelete: Cascade)

  @@index([driverRouteId, order])
  @@index([status])
}

model RouteWaypoint {
  id                       Int          @id @default(autoincrement())
  driverRouteId            Int
  childId                  Int
  driverId                 Int
  order                    Int
  address                  String?
  cumulativeDistanceMeters Int?
  eta                      DateTime?
  latitude                 Float?
  longitude                Float?
  status                   String       @default("PENDING")
  type                     WaypointType
  attendance               Attendance[]
  child                    Child        @relation(fields: [childId], references: [child_id])
  driver                   Driver       @relation(fields: [driverId], references: [driver_id])
  driverRoute              DriverRoute  @relation(fields: [driverRouteId], references: [id])
}

model Attendance {
  id         Int            @id @default(autoincrement())
  driverId   Int
  childId    Int
  date       DateTime       @db.Date
  waypointId Int?
  type       String // "pickup" or "dropoff" 
  latitude   Float?
  longitude  Float?
  notes      String?
  tripId     Int?
  status     String         @default("completed")
  timestamp  DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  child      Child          @relation(fields: [childId], references: [child_id])
  driver     Driver         @relation(fields: [driverId], references: [driver_id])
  waypoint   RouteWaypoint? @relation(fields: [waypointId], references: [id])

  @@unique([driverId, childId, date, type])
  @@index([driverId])
  @@index([childId])
  @@index([waypointId])
  @@index([timestamp])
  @@index([date])
}

model ChildPayment {
  id                 Int                @id @default(autoincrement())
  rideRequestId      Int?
  childId            Int
  driverId           Int
  customerId         Int
  paymentMonth       Int
  paymentYear        Int
  baseMonthlyPrice   Float
  isAdjusted         Boolean            @default(false)
  adjustmentPercent  Float?
  adjustedPrice      Float?
  adjustmentReason   String?
  adjustmentDate     DateTime?
  finalPrice         Float
  amountPaid         Float              @default(0)
  paymentStatus      ChildPaymentStatus @default(NOT_DUE)
  paymentEvents      Json?
  dueDate            DateTime?
  gracePeriodEndDate DateTime?
  isPrepaid          Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  paymentMethod      String?
  transactionRef     String?
  carryForwardDue    Float              @default(0)
  Child              Child              @relation(fields: [childId], references: [child_id])
  Customer           Customer           @relation(fields: [customerId], references: [customer_id])
  Driver             Driver             @relation(fields: [driverId], references: [driver_id])

  @@unique([childId, paymentYear, paymentMonth])
  @@index([customerId])
  @@index([driverId, paymentYear, paymentMonth])
}

model StaffRideRequest {
  id              Int             @id @default(autoincrement())
  staffId         Int
  driverId        Int
  status          RequestStatus   @default(Pending)
  Estimation      Float?
  Amount          Float?
  AssignedDate    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  Driver          Driver          @relation(fields: [driverId], references: [driver_id])
  Staff_Passenger Staff_Passenger @relation(fields: [staffId], references: [id])
}

enum RegistrationStatus {
  OTP_PENDING
  OTP_VERIFIED
  ACCOUNT_CREATED
  HAVING_A_PROFILE
}

enum OtpPurpose {
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN
}

enum UserType {
  CUSTOMER
  DRIVER
}

enum Gender {
  Male
  Female
  Unspecified
}

enum RequestStatus {
  Pending
  Assigned
  Unassigned
  Rejected
}

enum UserTypes {
  CUSTOMER
  WEBUSER
  BACKUPDRIVER
  DRIVER
  VEHICLEOWNER
  CHILD
  STAFF
}

enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}

enum WaypointType {
  PICKUP
  DROPOFF
}

enum NotificationTypes {
  System
  Alert
  Other
  Chat
}

enum ChildPaymentStatus {
  NOT_DUE
  PENDING
  PAID
  OVERDUE
  GRACE_PERIOD
  CANCELLED
}

enum Ridetype {
  School
  Work
  Both
}

enum ComplaintInquiryCategory {
  SYSTEM
  DRIVER
  PAYMENT
  OTHER
}

enum ComplaintInquiryTypes {
  COMPLAINT
  INQUIRY
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
enum StopStatus {
  PENDING
  ARRIVED
  COMPLETED
  SKIPPED
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  FINANCE_MANAGER
  DRIVER_COORDINATOR
}
